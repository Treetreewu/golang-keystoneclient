/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainConfigLDAP Required to set the LDAP group configuration options.
type DomainConfigLDAP struct {
	// The LDAP URL.
	Url *string `json:"url,omitempty"`
	// The base distinguished name (DN) of LDAP, from where all users can be reached.
	UserTreeDn *string `json:"user_tree_dn,omitempty"`
}

// NewDomainConfigLDAP instantiates a new DomainConfigLDAP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainConfigLDAP() *DomainConfigLDAP {
	this := DomainConfigLDAP{}
	return &this
}

// NewDomainConfigLDAPWithDefaults instantiates a new DomainConfigLDAP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainConfigLDAPWithDefaults() *DomainConfigLDAP {
	this := DomainConfigLDAP{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DomainConfigLDAP) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainConfigLDAP) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DomainConfigLDAP) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DomainConfigLDAP) SetUrl(v string) {
	o.Url = &v
}

// GetUserTreeDn returns the UserTreeDn field value if set, zero value otherwise.
func (o *DomainConfigLDAP) GetUserTreeDn() string {
	if o == nil || o.UserTreeDn == nil {
		var ret string
		return ret
	}
	return *o.UserTreeDn
}

// GetUserTreeDnOk returns a tuple with the UserTreeDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainConfigLDAP) GetUserTreeDnOk() (*string, bool) {
	if o == nil || o.UserTreeDn == nil {
		return nil, false
	}
	return o.UserTreeDn, true
}

// HasUserTreeDn returns a boolean if a field has been set.
func (o *DomainConfigLDAP) HasUserTreeDn() bool {
	if o != nil && o.UserTreeDn != nil {
		return true
	}

	return false
}

// SetUserTreeDn gets a reference to the given string and assigns it to the UserTreeDn field.
func (o *DomainConfigLDAP) SetUserTreeDn(v string) {
	o.UserTreeDn = &v
}

func (o DomainConfigLDAP) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.UserTreeDn != nil {
		toSerialize["user_tree_dn"] = o.UserTreeDn
	}
	return json.Marshal(toSerialize)
}

type NullableDomainConfigLDAP struct {
	value *DomainConfigLDAP
	isSet bool
}

func (v NullableDomainConfigLDAP) Get() *DomainConfigLDAP {
	return v.value
}

func (v *NullableDomainConfigLDAP) Set(val *DomainConfigLDAP) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainConfigLDAP) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainConfigLDAP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainConfigLDAP(val *DomainConfigLDAP) *NullableDomainConfigLDAP {
	return &NullableDomainConfigLDAP{value: val, isSet: true}
}

func (v NullableDomainConfigLDAP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainConfigLDAP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
