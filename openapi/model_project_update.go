// Copyright 2017 EasyStack, Inc.

/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProjectUpdate struct for ProjectUpdate
type ProjectUpdate struct {
	// The new name of the project, which must be unique within the owning domain. A project can have the same name as its domain.
	Name *string `json:"name,omitempty"`
	// Indicates whether the project also acts as a domain. If set to `true`, this project acts as both a project and domain. As a domain, the project provides a name space in which you can create users, groups, and other projects. If set to `false`, this project behaves as a regular project that contains only resources. Default is `false`. You cannot update this parameter after you create the project.
	IsDomain *bool `json:"is_domain,omitempty"`
	// The new description of the project.
	Description *string `json:"description,omitempty"`
	// If set to true, project is enabled. If set to false, project is disabled. The default is true.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewProjectUpdate instantiates a new ProjectUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectUpdate() *ProjectUpdate {
	this := ProjectUpdate{}
	return &this
}

// NewProjectUpdateWithDefaults instantiates a new ProjectUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectUpdateWithDefaults() *ProjectUpdate {
	this := ProjectUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectUpdate) SetName(v string) {
	o.Name = &v
}

// GetIsDomain returns the IsDomain field value if set, zero value otherwise.
func (o *ProjectUpdate) GetIsDomain() bool {
	if o == nil || o.IsDomain == nil {
		var ret bool
		return ret
	}
	return *o.IsDomain
}

// GetIsDomainOk returns a tuple with the IsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdate) GetIsDomainOk() (*bool, bool) {
	if o == nil || o.IsDomain == nil {
		return nil, false
	}
	return o.IsDomain, true
}

// HasIsDomain returns a boolean if a field has been set.
func (o *ProjectUpdate) HasIsDomain() bool {
	if o != nil && o.IsDomain != nil {
		return true
	}

	return false
}

// SetIsDomain gets a reference to the given bool and assigns it to the IsDomain field.
func (o *ProjectUpdate) SetIsDomain(v bool) {
	o.IsDomain = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ProjectUpdate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ProjectUpdate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ProjectUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ProjectUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.IsDomain != nil {
		toSerialize["is_domain"] = o.IsDomain
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableProjectUpdate struct {
	value *ProjectUpdate
	isSet bool
}

func (v NullableProjectUpdate) Get() *ProjectUpdate {
	return v.value
}

func (v *NullableProjectUpdate) Set(val *ProjectUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectUpdate(val *ProjectUpdate) *NullableProjectUpdate {
	return &NullableProjectUpdate{value: val, isSet: true}
}

func (v NullableProjectUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
