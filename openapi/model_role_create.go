/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoleCreate struct for RoleCreate
type RoleCreate struct {
	// The role name.
	Name string `json:"name"`
	// The role type.
	Type *string `json:"type,omitempty"`
	// The ID of the domain of the role.
	DomainId *string `json:"domain_id,omitempty"`
	// Add description about the role.
	Description *string `json:"description,omitempty"`
	// Show this role in ECP or not.
	Display *bool `json:"display,omitempty"`
}

// NewRoleCreate instantiates a new RoleCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleCreate(name string) *RoleCreate {
	this := RoleCreate{}
	this.Name = name
	return &this
}

// NewRoleCreateWithDefaults instantiates a new RoleCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleCreateWithDefaults() *RoleCreate {
	this := RoleCreate{}
	return &this
}

// GetName returns the Name field value
func (o *RoleCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleCreate) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleCreate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoleCreate) SetType(v string) {
	o.Type = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *RoleCreate) GetDomainId() string {
	if o == nil || o.DomainId == nil {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreate) GetDomainIdOk() (*string, bool) {
	if o == nil || o.DomainId == nil {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *RoleCreate) HasDomainId() bool {
	if o != nil && o.DomainId != nil {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *RoleCreate) SetDomainId(v string) {
	o.DomainId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleCreate) SetDescription(v string) {
	o.Description = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *RoleCreate) GetDisplay() bool {
	if o == nil || o.Display == nil {
		var ret bool
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreate) GetDisplayOk() (*bool, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *RoleCreate) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given bool and assigns it to the Display field.
func (o *RoleCreate) SetDisplay(v bool) {
	o.Display = &v
}

func (o RoleCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DomainId != nil {
		toSerialize["domain_id"] = o.DomainId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableRoleCreate struct {
	value *RoleCreate
	isSet bool
}

func (v NullableRoleCreate) Get() *RoleCreate {
	return v.value
}

func (v *NullableRoleCreate) Set(val *RoleCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleCreate(val *RoleCreate) *NullableRoleCreate {
	return &NullableRoleCreate{value: val, isSet: true}
}

func (v NullableRoleCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
