/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainLDAPConfig struct for DomainLDAPConfig
type DomainLDAPConfig struct {
	UserCount *int32 `json:"user_count,omitempty"`
}

// NewDomainLDAPConfig instantiates a new DomainLDAPConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainLDAPConfig() *DomainLDAPConfig {
	this := DomainLDAPConfig{}
	return &this
}

// NewDomainLDAPConfigWithDefaults instantiates a new DomainLDAPConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainLDAPConfigWithDefaults() *DomainLDAPConfig {
	this := DomainLDAPConfig{}
	return &this
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *DomainLDAPConfig) GetUserCount() int32 {
	if o == nil || o.UserCount == nil {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainLDAPConfig) GetUserCountOk() (*int32, bool) {
	if o == nil || o.UserCount == nil {
		return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *DomainLDAPConfig) HasUserCount() bool {
	if o != nil && o.UserCount != nil {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *DomainLDAPConfig) SetUserCount(v int32) {
	o.UserCount = &v
}

func (o DomainLDAPConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserCount != nil {
		toSerialize["user_count"] = o.UserCount
	}
	return json.Marshal(toSerialize)
}

type NullableDomainLDAPConfig struct {
	value *DomainLDAPConfig
	isSet bool
}

func (v NullableDomainLDAPConfig) Get() *DomainLDAPConfig {
	return v.value
}

func (v *NullableDomainLDAPConfig) Set(val *DomainLDAPConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainLDAPConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainLDAPConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainLDAPConfig(val *DomainLDAPConfig) *NullableDomainLDAPConfig {
	return &NullableDomainLDAPConfig{value: val, isSet: true}
}

func (v NullableDomainLDAPConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainLDAPConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
