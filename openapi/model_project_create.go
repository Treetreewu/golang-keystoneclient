/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProjectCreate struct for ProjectCreate
type ProjectCreate struct {
	// The ID of the parent of the project.  If specified on project creation, this places the project within a hierarchy and implicitly defines the owning domain, which will be the same domain as the parent specified. If `parent_id` is not specified and `is_domain` is `false`, then the project will use its owning domain as its parent. If `is_domain` is `true` (i.e. the project is acting as a domain), then `parent_id` must not specified (or if it is, it must be null) since domains have no parents.  `parent_id` is immutable, and can’t be updated after the project is created - hence a project cannot be moved within the hierarchy.
	ParentId *string `json:"parent_id,omitempty"`
	// The new name of the project, which must be unique within the owning domain. A project can have the same name as its domain.
	Name string `json:"name"`
	// Indicates whether the project also acts as a domain. If set to `true`, this project acts as both a project and domain. As a domain, the project provides a name space in which you can create users, groups, and other projects. If set to `false`, this project behaves as a regular project that contains only resources. Default is `false`. You cannot update this parameter after you create the project.
	IsDomain *bool `json:"is_domain,omitempty"`
	// The new description of the project.
	Description *string `json:"description,omitempty"`
	// If set to true, project is enabled. If set to false, project is disabled. The default is true.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the domain for the project.  For projects acting as a domain, the domain_id must not be specified, it will be generated by the Identity service implementation.  For regular projects (i.e. those not acing as a domain), if `domain_id` is not specified, but `parent_id` is specified, then the domain ID of the parent will be used. If neither `domain_id` or `parent_id` is specified, the Identity service implementation will default to the domain to which the client’s token is scoped. If both `domain_id` and `parent_id` are specified, and they do not indicate the same domain, an `Bad Request (400)` will be returned.
	DomainId *string `json:"domain_id,omitempty"`
}

// NewProjectCreate instantiates a new ProjectCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCreate(name string) *ProjectCreate {
	this := ProjectCreate{}
	this.Name = name
	return &this
}

// NewProjectCreateWithDefaults instantiates a new ProjectCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCreateWithDefaults() *ProjectCreate {
	this := ProjectCreate{}
	return &this
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ProjectCreate) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ProjectCreate) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ProjectCreate) SetParentId(v string) {
	o.ParentId = &v
}

// GetName returns the Name field value
func (o *ProjectCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectCreate) SetName(v string) {
	o.Name = v
}

// GetIsDomain returns the IsDomain field value if set, zero value otherwise.
func (o *ProjectCreate) GetIsDomain() bool {
	if o == nil || o.IsDomain == nil {
		var ret bool
		return ret
	}
	return *o.IsDomain
}

// GetIsDomainOk returns a tuple with the IsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetIsDomainOk() (*bool, bool) {
	if o == nil || o.IsDomain == nil {
		return nil, false
	}
	return o.IsDomain, true
}

// HasIsDomain returns a boolean if a field has been set.
func (o *ProjectCreate) HasIsDomain() bool {
	if o != nil && o.IsDomain != nil {
		return true
	}

	return false
}

// SetIsDomain gets a reference to the given bool and assigns it to the IsDomain field.
func (o *ProjectCreate) SetIsDomain(v bool) {
	o.IsDomain = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectCreate) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ProjectCreate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ProjectCreate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ProjectCreate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *ProjectCreate) GetDomainId() string {
	if o == nil || o.DomainId == nil {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetDomainIdOk() (*string, bool) {
	if o == nil || o.DomainId == nil {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *ProjectCreate) HasDomainId() bool {
	if o != nil && o.DomainId != nil {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *ProjectCreate) SetDomainId(v string) {
	o.DomainId = &v
}

func (o ProjectCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ParentId != nil {
		toSerialize["parent_id"] = o.ParentId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.IsDomain != nil {
		toSerialize["is_domain"] = o.IsDomain
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.DomainId != nil {
		toSerialize["domain_id"] = o.DomainId
	}
	return json.Marshal(toSerialize)
}

type NullableProjectCreate struct {
	value *ProjectCreate
	isSet bool
}

func (v NullableProjectCreate) Get() *ProjectCreate {
	return v.value
}

func (v *NullableProjectCreate) Set(val *ProjectCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCreate(val *ProjectCreate) *NullableProjectCreate {
	return &NullableProjectCreate{value: val, isSet: true}
}

func (v NullableProjectCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
