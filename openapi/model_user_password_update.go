// Copyright 2017 EasyStack, Inc.

/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPasswordUpdate struct for UserPasswordUpdate
type UserPasswordUpdate struct {
	OriginalPassword string `json:"original_password"`
	Password         string `json:"password"`
}

// NewUserPasswordUpdate instantiates a new UserPasswordUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordUpdate(originalPassword string, password string) *UserPasswordUpdate {
	this := UserPasswordUpdate{}
	this.OriginalPassword = originalPassword
	this.Password = password
	return &this
}

// NewUserPasswordUpdateWithDefaults instantiates a new UserPasswordUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordUpdateWithDefaults() *UserPasswordUpdate {
	this := UserPasswordUpdate{}
	return &this
}

// GetOriginalPassword returns the OriginalPassword field value
func (o *UserPasswordUpdate) GetOriginalPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalPassword
}

// GetOriginalPasswordOk returns a tuple with the OriginalPassword field value
// and a boolean to check if the value has been set.
func (o *UserPasswordUpdate) GetOriginalPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPassword, true
}

// SetOriginalPassword sets field value
func (o *UserPasswordUpdate) SetOriginalPassword(v string) {
	o.OriginalPassword = v
}

// GetPassword returns the Password field value
func (o *UserPasswordUpdate) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserPasswordUpdate) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserPasswordUpdate) SetPassword(v string) {
	o.Password = v
}

func (o UserPasswordUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["original_password"] = o.OriginalPassword
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableUserPasswordUpdate struct {
	value *UserPasswordUpdate
	isSet bool
}

func (v NullableUserPasswordUpdate) Get() *UserPasswordUpdate {
	return v.value
}

func (v *NullableUserPasswordUpdate) Set(val *UserPasswordUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordUpdate(val *UserPasswordUpdate) *NullableUserPasswordUpdate {
	return &NullableUserPasswordUpdate{value: val, isSet: true}
}

func (v NullableUserPasswordUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
