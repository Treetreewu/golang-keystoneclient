/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoleAssignmentWithNames struct for RoleAssignmentWithNames
type RoleAssignmentWithNames struct {
	Links *RoleAssignmentLinks                     `json:"links,omitempty"`
	Role  *RoleAssignmentListResponseWithNamesRole `json:"role,omitempty"`
	User  *RoleAssignmentListResponseWithNamesRole `json:"user,omitempty"`
	Scope *RoleAssignmentScopeWithNames            `json:"scope,omitempty"`
}

// NewRoleAssignmentWithNames instantiates a new RoleAssignmentWithNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAssignmentWithNames() *RoleAssignmentWithNames {
	this := RoleAssignmentWithNames{}
	return &this
}

// NewRoleAssignmentWithNamesWithDefaults instantiates a new RoleAssignmentWithNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAssignmentWithNamesWithDefaults() *RoleAssignmentWithNames {
	this := RoleAssignmentWithNames{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RoleAssignmentWithNames) GetLinks() RoleAssignmentLinks {
	if o == nil || o.Links == nil {
		var ret RoleAssignmentLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentWithNames) GetLinksOk() (*RoleAssignmentLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RoleAssignmentWithNames) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given RoleAssignmentLinks and assigns it to the Links field.
func (o *RoleAssignmentWithNames) SetLinks(v RoleAssignmentLinks) {
	o.Links = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleAssignmentWithNames) GetRole() RoleAssignmentListResponseWithNamesRole {
	if o == nil || o.Role == nil {
		var ret RoleAssignmentListResponseWithNamesRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentWithNames) GetRoleOk() (*RoleAssignmentListResponseWithNamesRole, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleAssignmentWithNames) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given RoleAssignmentListResponseWithNamesRole and assigns it to the Role field.
func (o *RoleAssignmentWithNames) SetRole(v RoleAssignmentListResponseWithNamesRole) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RoleAssignmentWithNames) GetUser() RoleAssignmentListResponseWithNamesRole {
	if o == nil || o.User == nil {
		var ret RoleAssignmentListResponseWithNamesRole
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentWithNames) GetUserOk() (*RoleAssignmentListResponseWithNamesRole, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RoleAssignmentWithNames) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given RoleAssignmentListResponseWithNamesRole and assigns it to the User field.
func (o *RoleAssignmentWithNames) SetUser(v RoleAssignmentListResponseWithNamesRole) {
	o.User = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RoleAssignmentWithNames) GetScope() RoleAssignmentScopeWithNames {
	if o == nil || o.Scope == nil {
		var ret RoleAssignmentScopeWithNames
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentWithNames) GetScopeOk() (*RoleAssignmentScopeWithNames, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RoleAssignmentWithNames) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given RoleAssignmentScopeWithNames and assigns it to the Scope field.
func (o *RoleAssignmentWithNames) SetScope(v RoleAssignmentScopeWithNames) {
	o.Scope = &v
}

func (o RoleAssignmentWithNames) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableRoleAssignmentWithNames struct {
	value *RoleAssignmentWithNames
	isSet bool
}

func (v NullableRoleAssignmentWithNames) Get() *RoleAssignmentWithNames {
	return v.value
}

func (v *NullableRoleAssignmentWithNames) Set(val *RoleAssignmentWithNames) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAssignmentWithNames) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAssignmentWithNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAssignmentWithNames(val *RoleAssignmentWithNames) *NullableRoleAssignmentWithNames {
	return &NullableRoleAssignmentWithNames{value: val, isSet: true}
}

func (v NullableRoleAssignmentWithNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAssignmentWithNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
