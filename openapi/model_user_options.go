/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserOptions struct for UserOptions
type UserOptions struct {
	IgnoreChangePasswordUponFirstUse *bool `json:"ignore_change_password_upon_first_use,omitempty"`
	IgnorePasswordExpiry             *bool `json:"ignore_password_expiry,omitempty"`
	IgnoreLockoutFailureAttempts     *bool `json:"ignore_lockout_failure_attempts,omitempty"`
	LockPassword                     *bool `json:"lock_password,omitempty"`
	MultiFactorAuthEnabled           *bool `json:"multi_factor_auth_enabled,omitempty"`
	MultiFactorAuthRules             *bool `json:"multi_factor_auth_rules,omitempty"`
	IgnoreUserInactivity             *bool `json:"ignore_user_inactivity,omitempty"`
}

// NewUserOptions instantiates a new UserOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserOptions() *UserOptions {
	this := UserOptions{}
	return &this
}

// NewUserOptionsWithDefaults instantiates a new UserOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserOptionsWithDefaults() *UserOptions {
	this := UserOptions{}
	return &this
}

// GetIgnoreChangePasswordUponFirstUse returns the IgnoreChangePasswordUponFirstUse field value if set, zero value otherwise.
func (o *UserOptions) GetIgnoreChangePasswordUponFirstUse() bool {
	if o == nil || o.IgnoreChangePasswordUponFirstUse == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreChangePasswordUponFirstUse
}

// GetIgnoreChangePasswordUponFirstUseOk returns a tuple with the IgnoreChangePasswordUponFirstUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetIgnoreChangePasswordUponFirstUseOk() (*bool, bool) {
	if o == nil || o.IgnoreChangePasswordUponFirstUse == nil {
		return nil, false
	}
	return o.IgnoreChangePasswordUponFirstUse, true
}

// HasIgnoreChangePasswordUponFirstUse returns a boolean if a field has been set.
func (o *UserOptions) HasIgnoreChangePasswordUponFirstUse() bool {
	if o != nil && o.IgnoreChangePasswordUponFirstUse != nil {
		return true
	}

	return false
}

// SetIgnoreChangePasswordUponFirstUse gets a reference to the given bool and assigns it to the IgnoreChangePasswordUponFirstUse field.
func (o *UserOptions) SetIgnoreChangePasswordUponFirstUse(v bool) {
	o.IgnoreChangePasswordUponFirstUse = &v
}

// GetIgnorePasswordExpiry returns the IgnorePasswordExpiry field value if set, zero value otherwise.
func (o *UserOptions) GetIgnorePasswordExpiry() bool {
	if o == nil || o.IgnorePasswordExpiry == nil {
		var ret bool
		return ret
	}
	return *o.IgnorePasswordExpiry
}

// GetIgnorePasswordExpiryOk returns a tuple with the IgnorePasswordExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetIgnorePasswordExpiryOk() (*bool, bool) {
	if o == nil || o.IgnorePasswordExpiry == nil {
		return nil, false
	}
	return o.IgnorePasswordExpiry, true
}

// HasIgnorePasswordExpiry returns a boolean if a field has been set.
func (o *UserOptions) HasIgnorePasswordExpiry() bool {
	if o != nil && o.IgnorePasswordExpiry != nil {
		return true
	}

	return false
}

// SetIgnorePasswordExpiry gets a reference to the given bool and assigns it to the IgnorePasswordExpiry field.
func (o *UserOptions) SetIgnorePasswordExpiry(v bool) {
	o.IgnorePasswordExpiry = &v
}

// GetIgnoreLockoutFailureAttempts returns the IgnoreLockoutFailureAttempts field value if set, zero value otherwise.
func (o *UserOptions) GetIgnoreLockoutFailureAttempts() bool {
	if o == nil || o.IgnoreLockoutFailureAttempts == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreLockoutFailureAttempts
}

// GetIgnoreLockoutFailureAttemptsOk returns a tuple with the IgnoreLockoutFailureAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetIgnoreLockoutFailureAttemptsOk() (*bool, bool) {
	if o == nil || o.IgnoreLockoutFailureAttempts == nil {
		return nil, false
	}
	return o.IgnoreLockoutFailureAttempts, true
}

// HasIgnoreLockoutFailureAttempts returns a boolean if a field has been set.
func (o *UserOptions) HasIgnoreLockoutFailureAttempts() bool {
	if o != nil && o.IgnoreLockoutFailureAttempts != nil {
		return true
	}

	return false
}

// SetIgnoreLockoutFailureAttempts gets a reference to the given bool and assigns it to the IgnoreLockoutFailureAttempts field.
func (o *UserOptions) SetIgnoreLockoutFailureAttempts(v bool) {
	o.IgnoreLockoutFailureAttempts = &v
}

// GetLockPassword returns the LockPassword field value if set, zero value otherwise.
func (o *UserOptions) GetLockPassword() bool {
	if o == nil || o.LockPassword == nil {
		var ret bool
		return ret
	}
	return *o.LockPassword
}

// GetLockPasswordOk returns a tuple with the LockPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetLockPasswordOk() (*bool, bool) {
	if o == nil || o.LockPassword == nil {
		return nil, false
	}
	return o.LockPassword, true
}

// HasLockPassword returns a boolean if a field has been set.
func (o *UserOptions) HasLockPassword() bool {
	if o != nil && o.LockPassword != nil {
		return true
	}

	return false
}

// SetLockPassword gets a reference to the given bool and assigns it to the LockPassword field.
func (o *UserOptions) SetLockPassword(v bool) {
	o.LockPassword = &v
}

// GetMultiFactorAuthEnabled returns the MultiFactorAuthEnabled field value if set, zero value otherwise.
func (o *UserOptions) GetMultiFactorAuthEnabled() bool {
	if o == nil || o.MultiFactorAuthEnabled == nil {
		var ret bool
		return ret
	}
	return *o.MultiFactorAuthEnabled
}

// GetMultiFactorAuthEnabledOk returns a tuple with the MultiFactorAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetMultiFactorAuthEnabledOk() (*bool, bool) {
	if o == nil || o.MultiFactorAuthEnabled == nil {
		return nil, false
	}
	return o.MultiFactorAuthEnabled, true
}

// HasMultiFactorAuthEnabled returns a boolean if a field has been set.
func (o *UserOptions) HasMultiFactorAuthEnabled() bool {
	if o != nil && o.MultiFactorAuthEnabled != nil {
		return true
	}

	return false
}

// SetMultiFactorAuthEnabled gets a reference to the given bool and assigns it to the MultiFactorAuthEnabled field.
func (o *UserOptions) SetMultiFactorAuthEnabled(v bool) {
	o.MultiFactorAuthEnabled = &v
}

// GetMultiFactorAuthRules returns the MultiFactorAuthRules field value if set, zero value otherwise.
func (o *UserOptions) GetMultiFactorAuthRules() bool {
	if o == nil || o.MultiFactorAuthRules == nil {
		var ret bool
		return ret
	}
	return *o.MultiFactorAuthRules
}

// GetMultiFactorAuthRulesOk returns a tuple with the MultiFactorAuthRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetMultiFactorAuthRulesOk() (*bool, bool) {
	if o == nil || o.MultiFactorAuthRules == nil {
		return nil, false
	}
	return o.MultiFactorAuthRules, true
}

// HasMultiFactorAuthRules returns a boolean if a field has been set.
func (o *UserOptions) HasMultiFactorAuthRules() bool {
	if o != nil && o.MultiFactorAuthRules != nil {
		return true
	}

	return false
}

// SetMultiFactorAuthRules gets a reference to the given bool and assigns it to the MultiFactorAuthRules field.
func (o *UserOptions) SetMultiFactorAuthRules(v bool) {
	o.MultiFactorAuthRules = &v
}

// GetIgnoreUserInactivity returns the IgnoreUserInactivity field value if set, zero value otherwise.
func (o *UserOptions) GetIgnoreUserInactivity() bool {
	if o == nil || o.IgnoreUserInactivity == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUserInactivity
}

// GetIgnoreUserInactivityOk returns a tuple with the IgnoreUserInactivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserOptions) GetIgnoreUserInactivityOk() (*bool, bool) {
	if o == nil || o.IgnoreUserInactivity == nil {
		return nil, false
	}
	return o.IgnoreUserInactivity, true
}

// HasIgnoreUserInactivity returns a boolean if a field has been set.
func (o *UserOptions) HasIgnoreUserInactivity() bool {
	if o != nil && o.IgnoreUserInactivity != nil {
		return true
	}

	return false
}

// SetIgnoreUserInactivity gets a reference to the given bool and assigns it to the IgnoreUserInactivity field.
func (o *UserOptions) SetIgnoreUserInactivity(v bool) {
	o.IgnoreUserInactivity = &v
}

func (o UserOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IgnoreChangePasswordUponFirstUse != nil {
		toSerialize["ignore_change_password_upon_first_use"] = o.IgnoreChangePasswordUponFirstUse
	}
	if o.IgnorePasswordExpiry != nil {
		toSerialize["ignore_password_expiry"] = o.IgnorePasswordExpiry
	}
	if o.IgnoreLockoutFailureAttempts != nil {
		toSerialize["ignore_lockout_failure_attempts"] = o.IgnoreLockoutFailureAttempts
	}
	if o.LockPassword != nil {
		toSerialize["lock_password"] = o.LockPassword
	}
	if o.MultiFactorAuthEnabled != nil {
		toSerialize["multi_factor_auth_enabled"] = o.MultiFactorAuthEnabled
	}
	if o.MultiFactorAuthRules != nil {
		toSerialize["multi_factor_auth_rules"] = o.MultiFactorAuthRules
	}
	if o.IgnoreUserInactivity != nil {
		toSerialize["ignore_user_inactivity"] = o.IgnoreUserInactivity
	}
	return json.Marshal(toSerialize)
}

type NullableUserOptions struct {
	value *UserOptions
	isSet bool
}

func (v NullableUserOptions) Get() *UserOptions {
	return v.value
}

func (v *NullableUserOptions) Set(val *UserOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOptions(val *UserOptions) *NullableUserOptions {
	return &NullableUserOptions{value: val, isSet: true}
}

func (v NullableUserOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
