/*
Keystone API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserOptions struct for UserOptions
type UserOptions struct {
	IgnoreChangePasswordUponFirstUse NullableBool `json:"ignore_change_password_upon_first_use,omitempty"`
	IgnorePasswordExpiry             NullableBool `json:"ignore_password_expiry,omitempty"`
	IgnoreLockoutFailureAttempts     NullableBool `json:"ignore_lockout_failure_attempts,omitempty"`
	LockPassword                     NullableBool `json:"lock_password,omitempty"`
	MultiFactorAuthEnabled           NullableBool `json:"multi_factor_auth_enabled,omitempty"`
	MultiFactorAuthRules             NullableBool `json:"multi_factor_auth_rules,omitempty"`
	IgnoreUserInactivity             NullableBool `json:"ignore_user_inactivity,omitempty"`
}

// NewUserOptions instantiates a new UserOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserOptions() *UserOptions {
	this := UserOptions{}
	return &this
}

// NewUserOptionsWithDefaults instantiates a new UserOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserOptionsWithDefaults() *UserOptions {
	this := UserOptions{}
	return &this
}

// GetIgnoreChangePasswordUponFirstUse returns the IgnoreChangePasswordUponFirstUse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetIgnoreChangePasswordUponFirstUse() bool {
	if o == nil || o.IgnoreChangePasswordUponFirstUse.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreChangePasswordUponFirstUse.Get()
}

// GetIgnoreChangePasswordUponFirstUseOk returns a tuple with the IgnoreChangePasswordUponFirstUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetIgnoreChangePasswordUponFirstUseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreChangePasswordUponFirstUse.Get(), o.IgnoreChangePasswordUponFirstUse.IsSet()
}

// HasIgnoreChangePasswordUponFirstUse returns a boolean if a field has been set.
func (o *UserOptions) HasIgnoreChangePasswordUponFirstUse() bool {
	if o != nil && o.IgnoreChangePasswordUponFirstUse.IsSet() {
		return true
	}

	return false
}

// SetIgnoreChangePasswordUponFirstUse gets a reference to the given NullableBool and assigns it to the IgnoreChangePasswordUponFirstUse field.
func (o *UserOptions) SetIgnoreChangePasswordUponFirstUse(v bool) {
	o.IgnoreChangePasswordUponFirstUse.Set(&v)
}

// SetIgnoreChangePasswordUponFirstUseNil sets the value for IgnoreChangePasswordUponFirstUse to be an explicit nil
func (o *UserOptions) SetIgnoreChangePasswordUponFirstUseNil() {
	o.IgnoreChangePasswordUponFirstUse.Set(nil)
}

// UnsetIgnoreChangePasswordUponFirstUse ensures that no value is present for IgnoreChangePasswordUponFirstUse, not even an explicit nil
func (o *UserOptions) UnsetIgnoreChangePasswordUponFirstUse() {
	o.IgnoreChangePasswordUponFirstUse.Unset()
}

// GetIgnorePasswordExpiry returns the IgnorePasswordExpiry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetIgnorePasswordExpiry() bool {
	if o == nil || o.IgnorePasswordExpiry.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IgnorePasswordExpiry.Get()
}

// GetIgnorePasswordExpiryOk returns a tuple with the IgnorePasswordExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetIgnorePasswordExpiryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnorePasswordExpiry.Get(), o.IgnorePasswordExpiry.IsSet()
}

// HasIgnorePasswordExpiry returns a boolean if a field has been set.
func (o *UserOptions) HasIgnorePasswordExpiry() bool {
	if o != nil && o.IgnorePasswordExpiry.IsSet() {
		return true
	}

	return false
}

// SetIgnorePasswordExpiry gets a reference to the given NullableBool and assigns it to the IgnorePasswordExpiry field.
func (o *UserOptions) SetIgnorePasswordExpiry(v bool) {
	o.IgnorePasswordExpiry.Set(&v)
}

// SetIgnorePasswordExpiryNil sets the value for IgnorePasswordExpiry to be an explicit nil
func (o *UserOptions) SetIgnorePasswordExpiryNil() {
	o.IgnorePasswordExpiry.Set(nil)
}

// UnsetIgnorePasswordExpiry ensures that no value is present for IgnorePasswordExpiry, not even an explicit nil
func (o *UserOptions) UnsetIgnorePasswordExpiry() {
	o.IgnorePasswordExpiry.Unset()
}

// GetIgnoreLockoutFailureAttempts returns the IgnoreLockoutFailureAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetIgnoreLockoutFailureAttempts() bool {
	if o == nil || o.IgnoreLockoutFailureAttempts.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreLockoutFailureAttempts.Get()
}

// GetIgnoreLockoutFailureAttemptsOk returns a tuple with the IgnoreLockoutFailureAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetIgnoreLockoutFailureAttemptsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreLockoutFailureAttempts.Get(), o.IgnoreLockoutFailureAttempts.IsSet()
}

// HasIgnoreLockoutFailureAttempts returns a boolean if a field has been set.
func (o *UserOptions) HasIgnoreLockoutFailureAttempts() bool {
	if o != nil && o.IgnoreLockoutFailureAttempts.IsSet() {
		return true
	}

	return false
}

// SetIgnoreLockoutFailureAttempts gets a reference to the given NullableBool and assigns it to the IgnoreLockoutFailureAttempts field.
func (o *UserOptions) SetIgnoreLockoutFailureAttempts(v bool) {
	o.IgnoreLockoutFailureAttempts.Set(&v)
}

// SetIgnoreLockoutFailureAttemptsNil sets the value for IgnoreLockoutFailureAttempts to be an explicit nil
func (o *UserOptions) SetIgnoreLockoutFailureAttemptsNil() {
	o.IgnoreLockoutFailureAttempts.Set(nil)
}

// UnsetIgnoreLockoutFailureAttempts ensures that no value is present for IgnoreLockoutFailureAttempts, not even an explicit nil
func (o *UserOptions) UnsetIgnoreLockoutFailureAttempts() {
	o.IgnoreLockoutFailureAttempts.Unset()
}

// GetLockPassword returns the LockPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetLockPassword() bool {
	if o == nil || o.LockPassword.Get() == nil {
		var ret bool
		return ret
	}
	return *o.LockPassword.Get()
}

// GetLockPasswordOk returns a tuple with the LockPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetLockPasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LockPassword.Get(), o.LockPassword.IsSet()
}

// HasLockPassword returns a boolean if a field has been set.
func (o *UserOptions) HasLockPassword() bool {
	if o != nil && o.LockPassword.IsSet() {
		return true
	}

	return false
}

// SetLockPassword gets a reference to the given NullableBool and assigns it to the LockPassword field.
func (o *UserOptions) SetLockPassword(v bool) {
	o.LockPassword.Set(&v)
}

// SetLockPasswordNil sets the value for LockPassword to be an explicit nil
func (o *UserOptions) SetLockPasswordNil() {
	o.LockPassword.Set(nil)
}

// UnsetLockPassword ensures that no value is present for LockPassword, not even an explicit nil
func (o *UserOptions) UnsetLockPassword() {
	o.LockPassword.Unset()
}

// GetMultiFactorAuthEnabled returns the MultiFactorAuthEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetMultiFactorAuthEnabled() bool {
	if o == nil || o.MultiFactorAuthEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MultiFactorAuthEnabled.Get()
}

// GetMultiFactorAuthEnabledOk returns a tuple with the MultiFactorAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetMultiFactorAuthEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MultiFactorAuthEnabled.Get(), o.MultiFactorAuthEnabled.IsSet()
}

// HasMultiFactorAuthEnabled returns a boolean if a field has been set.
func (o *UserOptions) HasMultiFactorAuthEnabled() bool {
	if o != nil && o.MultiFactorAuthEnabled.IsSet() {
		return true
	}

	return false
}

// SetMultiFactorAuthEnabled gets a reference to the given NullableBool and assigns it to the MultiFactorAuthEnabled field.
func (o *UserOptions) SetMultiFactorAuthEnabled(v bool) {
	o.MultiFactorAuthEnabled.Set(&v)
}

// SetMultiFactorAuthEnabledNil sets the value for MultiFactorAuthEnabled to be an explicit nil
func (o *UserOptions) SetMultiFactorAuthEnabledNil() {
	o.MultiFactorAuthEnabled.Set(nil)
}

// UnsetMultiFactorAuthEnabled ensures that no value is present for MultiFactorAuthEnabled, not even an explicit nil
func (o *UserOptions) UnsetMultiFactorAuthEnabled() {
	o.MultiFactorAuthEnabled.Unset()
}

// GetMultiFactorAuthRules returns the MultiFactorAuthRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetMultiFactorAuthRules() bool {
	if o == nil || o.MultiFactorAuthRules.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MultiFactorAuthRules.Get()
}

// GetMultiFactorAuthRulesOk returns a tuple with the MultiFactorAuthRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetMultiFactorAuthRulesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MultiFactorAuthRules.Get(), o.MultiFactorAuthRules.IsSet()
}

// HasMultiFactorAuthRules returns a boolean if a field has been set.
func (o *UserOptions) HasMultiFactorAuthRules() bool {
	if o != nil && o.MultiFactorAuthRules.IsSet() {
		return true
	}

	return false
}

// SetMultiFactorAuthRules gets a reference to the given NullableBool and assigns it to the MultiFactorAuthRules field.
func (o *UserOptions) SetMultiFactorAuthRules(v bool) {
	o.MultiFactorAuthRules.Set(&v)
}

// SetMultiFactorAuthRulesNil sets the value for MultiFactorAuthRules to be an explicit nil
func (o *UserOptions) SetMultiFactorAuthRulesNil() {
	o.MultiFactorAuthRules.Set(nil)
}

// UnsetMultiFactorAuthRules ensures that no value is present for MultiFactorAuthRules, not even an explicit nil
func (o *UserOptions) UnsetMultiFactorAuthRules() {
	o.MultiFactorAuthRules.Unset()
}

// GetIgnoreUserInactivity returns the IgnoreUserInactivity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOptions) GetIgnoreUserInactivity() bool {
	if o == nil || o.IgnoreUserInactivity.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreUserInactivity.Get()
}

// GetIgnoreUserInactivityOk returns a tuple with the IgnoreUserInactivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOptions) GetIgnoreUserInactivityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreUserInactivity.Get(), o.IgnoreUserInactivity.IsSet()
}

// HasIgnoreUserInactivity returns a boolean if a field has been set.
func (o *UserOptions) HasIgnoreUserInactivity() bool {
	if o != nil && o.IgnoreUserInactivity.IsSet() {
		return true
	}

	return false
}

// SetIgnoreUserInactivity gets a reference to the given NullableBool and assigns it to the IgnoreUserInactivity field.
func (o *UserOptions) SetIgnoreUserInactivity(v bool) {
	o.IgnoreUserInactivity.Set(&v)
}

// SetIgnoreUserInactivityNil sets the value for IgnoreUserInactivity to be an explicit nil
func (o *UserOptions) SetIgnoreUserInactivityNil() {
	o.IgnoreUserInactivity.Set(nil)
}

// UnsetIgnoreUserInactivity ensures that no value is present for IgnoreUserInactivity, not even an explicit nil
func (o *UserOptions) UnsetIgnoreUserInactivity() {
	o.IgnoreUserInactivity.Unset()
}

func (o UserOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IgnoreChangePasswordUponFirstUse.IsSet() {
		toSerialize["ignore_change_password_upon_first_use"] = o.IgnoreChangePasswordUponFirstUse.Get()
	}
	if o.IgnorePasswordExpiry.IsSet() {
		toSerialize["ignore_password_expiry"] = o.IgnorePasswordExpiry.Get()
	}
	if o.IgnoreLockoutFailureAttempts.IsSet() {
		toSerialize["ignore_lockout_failure_attempts"] = o.IgnoreLockoutFailureAttempts.Get()
	}
	if o.LockPassword.IsSet() {
		toSerialize["lock_password"] = o.LockPassword.Get()
	}
	if o.MultiFactorAuthEnabled.IsSet() {
		toSerialize["multi_factor_auth_enabled"] = o.MultiFactorAuthEnabled.Get()
	}
	if o.MultiFactorAuthRules.IsSet() {
		toSerialize["multi_factor_auth_rules"] = o.MultiFactorAuthRules.Get()
	}
	if o.IgnoreUserInactivity.IsSet() {
		toSerialize["ignore_user_inactivity"] = o.IgnoreUserInactivity.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserOptions struct {
	value *UserOptions
	isSet bool
}

func (v NullableUserOptions) Get() *UserOptions {
	return v.value
}

func (v *NullableUserOptions) Set(val *UserOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOptions(val *UserOptions) *NullableUserOptions {
	return &NullableUserOptions{value: val, isSet: true}
}

func (v NullableUserOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
